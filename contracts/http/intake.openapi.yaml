openapi: 3.1.0
info:
  title: Plutus Intake Service API
  version: 2025.1.0
  description: |
    Intake orchestration endpoints responsible for capturing applicant submissions,
    orchestrating residency-aware document processing, and surfacing intake state to
    dependent micro frontends. All request/response bodies are immutable audit
    artifacts and MUST include residency metadata to satisfy regional processing
    mandates.
  contact:
    name: Plutus API Platform
    email: api-platform@plutus.example.com
    url: https://developer.plutus.example.com/intake
  termsOfService: https://developer.plutus.example.com/terms
servers:
  - url: https://{region}.api.plutus.example.com/intake
    description: Regionalized production endpoint per residency boundary.
    variables:
      region:
        default: us1
        enum: [us1, eu1, ap1]
        description: ISO-aligned residency cell that dictates storage locality and data processors.
  - url: https://sandbox.api.plutus.example.com/intake
    description: Shared sandbox for partner onboarding with synthetic datasets only.
tags:
  - name: Applications
    description: Submission lifecycle endpoints.
  - name: Documents
    description: Document ingestion and validation endpoints.
  - name: Status
    description: Lightweight health + readiness probes for platform orchestration.
security:
  - oauth2: ["intake.applications.write", "intake.applications.read"]
  - tenantApiKey: []
paths:
  /applications:
    post:
      tags: [Applications]
      summary: Submit an intake application package.
      description: |
        Creates a new intake record with applicant profile, financial disclosures, and
        residency controls. The payload is **idempotent** when the provided
        `submissionId` and `tenantId` pair is reused. Downstream policy evaluation is
        triggered asynchronously via `application.created` lifecycle events.
      operationId: createApplication
      security:
        - oauth2: ["intake.applications.write"]
        - tenantApiKey: []
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/IdempotencyKey'
      requestBody:
        required: true
        description: Canonical intake payload minted by portal-web and validated locally before submission.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationSubmission'
      responses:
        '202':
          description: Submission accepted and queued for downstream evaluation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationAccepted'
        '409':
          $ref: '#/components/responses/ConflictError'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalError'
    get:
      tags: [Applications]
      summary: List intake applications for a tenant.
      description: Returns a cursor-paginated view of intake submissions filtered by residency cell.
      operationId: listApplications
      security:
        - oauth2: ["intake.applications.read"]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/Residency'
        - name: pageSize
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 200
            default: 25
          description: Maximum results per page. Bound at 200 to contain cell replication load.
        - name: pageCursor
          in: query
          required: false
          schema:
            type: string
          description: Opaque cursor issued by previous page results.
      responses:
        '200':
          description: Page of intake submissions matching filters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationPage'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/AuthError'
        '500':
          $ref: '#/components/responses/InternalError'
  /applications/{applicationId}:
    get:
      tags: [Applications]
      summary: Retrieve an intake application state snapshot.
      operationId: getApplication
      description: |
        Fetches the immutable intake submission along with policy evaluation metadata
        such as scoring fingerprints and residency enforcement tags. The `applicationId`
        is global but residency-scoped via `tenantResidency` to avoid cross-cell leakage.
      security:
        - oauth2: ["intake.applications.read"]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - name: applicationId
          in: path
          required: true
          schema:
            type: string
            pattern: 'app_[a-zA-Z0-9]{16}'
          description: Immutable identifier minted by the intake service at submission time.
      responses:
        '200':
          description: Intake submission including audit timeline.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationRecord'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalError'
  /applications/{applicationId}/documents:
    post:
      tags: [Documents]
      summary: Attach supporting documents to an intake submission.
      operationId: uploadDocuments
      description: |
        Accepts document manifests and secure upload URLs. The intake service validates
        residency consistency per document, enforces encryption-at-rest policies, and
        emits `documents.attached` events on success.
      security:
        - oauth2: ["intake.applications.write"]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - name: applicationId
          in: path
          required: true
          schema:
            type: string
            pattern: 'app_[a-zA-Z0-9]{16}'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentAttachmentRequest'
      responses:
        '202':
          description: Document ingest accepted; processing occurs async.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentAttachmentAccepted'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '413':
          description: Payload exceeds configured intake limits for tenant/residency cell.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
        '500':
          $ref: '#/components/responses/InternalError'
  /healthz:
    get:
      tags: [Status]
      summary: Report readiness for regional traffic.
      operationId: intakeHealth
      description: Exposes readiness telemetry for load balancers and orchestration checks.
      responses:
        '200':
          description: Service is healthy within residency cell.
          content:
            application/json:
              schema:
                type: object
                required: [status, region, uptimeSeconds]
                properties:
                  status:
                    type: string
                    enum: [OK]
                  region:
                    type: string
                  uptimeSeconds:
                    type: integer
                  lastConfigSyncIso:
                    type: string
                    format: date-time
                  dependencies:
                    type: array
                    items:
                      type: object
                      required: [name, status]
                      properties:
                        name:
                          type: string
                        status:
                          type: string
                        latencyMs:
                          type: integer
                        residencyAligned:
                          type: boolean
components:
  securitySchemes:
    oauth2:
      type: oauth2
      description: Confidential client OAuth2 using tenant-scoped scopes; tokens are minted by IAM service.
      flows:
        clientCredentials:
          tokenUrl: https://iam.api.plutus.example.com/oauth2/token
          scopes:
            intake.applications.write: Submit or mutate intake payloads.
            intake.applications.read: Retrieve intake submissions and statuses.
    tenantApiKey:
      type: apiKey
      in: header
      name: X-Tenant-Key
      description: Secondary shared-secret rotated every 12 hours to facilitate deterministic retries from low-trust channels.
  parameters:
    TenantId:
      name: X-Tenant-Id
      in: header
      required: true
      schema:
        type: string
        pattern: 'tenant_[a-z0-9\-]{6,36}'
      description: Residency-aware tenant identifier; mapped to residency cell and ABAC policy context.
    Residency:
      name: residency
      in: query
      required: false
      schema:
        type: string
        enum: [US, EU, APAC]
      description: Explicit residency filter; defaults to ABAC-derived residency for caller.
    IdempotencyKey:
      name: Idempotency-Key
      in: header
      required: true
      schema:
        type: string
        minLength: 8
        maxLength: 64
      description: Deduplicates retries across regional load balancers and message queues.
  schemas:
    ApplicationSubmission:
      type: object
      required:
        - submissionId
        - tenant
        - applicant
        - financialProfile
        - declaredResidency
        - consentArtifacts
      properties:
        submissionId:
          type: string
          pattern: 'sub_[a-zA-Z0-9]{12}'
          description: Client-generated submission identifier; reused to enforce idempotency.
        tenant:
          $ref: '#/components/schemas/TenantContext'
        applicant:
          $ref: '#/components/schemas/ApplicantProfile'
        financialProfile:
          $ref: '#/components/schemas/FinancialProfile'
        declaredResidency:
          $ref: '#/components/schemas/Residency'
        consentArtifacts:
          type: array
          description: Tokenized reference to consent documents stored via doc-residency safehouse.
          minItems: 1
          items:
            $ref: '#/components/schemas/ConsentReference'
        metadata:
          type: object
          description: Non-PII metadata for analytics; keys must follow snake_case.
          additionalProperties:
            type: string
    ApplicationAccepted:
      type: object
      required: [applicationId, status, audit]
      properties:
        applicationId:
          type: string
          description: System minted identifier referencing the canonical record.
        status:
          type: string
          enum: [QUEUED]
        audit:
          $ref: '#/components/schemas/AuditContext'
    ApplicationRecord:
      allOf:
        - $ref: '#/components/schemas/ApplicationSubmission'
        - type: object
          required: [applicationId, status, audit, policyEvaluations]
          properties:
            applicationId:
              type: string
            status:
              type: string
              enum: [QUEUED, VALIDATING, READY_FOR_DECISION, BLOCKED]
            policyEvaluations:
              type: array
              description: Ordered evaluation outcomes for auditing/rescoring.
              items:
                type: object
                required: [policyId, version, outcome, evaluatedAt]
                properties:
                  policyId:
                    type: string
                  version:
                    type: string
                  outcome:
                    type: string
                    enum: [ALLOW, REVIEW, DENY]
                  evaluatedAt:
                    type: string
                    format: date-time
                  residencyContext:
                    $ref: '#/components/schemas/Residency'
            audit:
              $ref: '#/components/schemas/AuditContext'
    ApplicationPage:
      type: object
      required: [items, pageInfo]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationRecord'
        pageInfo:
          type: object
          required: [pageSize, nextCursor, previousCursor]
          properties:
            pageSize:
              type: integer
            nextCursor:
              type: string
              nullable: true
            previousCursor:
              type: string
              nullable: true
    DocumentAttachmentRequest:
      type: object
      required: [documents, residencyOverride]
      properties:
        documents:
          type: array
          minItems: 1
          maxItems: 20
          items:
            type: object
            required: [documentId, type, uploadUrl, checksum]
            properties:
              documentId:
                type: string
                pattern: 'doc_[a-zA-Z0-9]{10}'
              type:
                type: string
                description: Document taxonomy slug (e.g., government_id, payroll_stub).
              uploadUrl:
                type: string
                format: uri
              checksum:
                type: string
                description: Base64 encoded SHA-256 digest.
              expiresAt:
                type: string
                format: date-time
              residencyContext:
                $ref: '#/components/schemas/Residency'
        residencyOverride:
          $ref: '#/components/schemas/Residency'
      description: Client-provided manifest mapping documents to data residency zone for compliance.
    DocumentAttachmentAccepted:
      type: object
      required: [applicationId, documentCount, audit]
      properties:
        applicationId:
          type: string
        documentCount:
          type: integer
        audit:
          $ref: '#/components/schemas/AuditContext'
    TenantContext:
      type: object
      required: [tenantId, residency]
      properties:
        tenantId:
          type: string
        residency:
          $ref: '#/components/schemas/Residency'
        segment:
          type: string
          description: Market segment (e.g., consumer, smb) used for ABAC policy scoping.
    ApplicantProfile:
      type: object
      required: [primaryApplicant, contact]
      properties:
        primaryApplicant:
          type: object
          required: [applicantId, firstName, lastName, dateOfBirth]
          properties:
            applicantId:
              type: string
            firstName:
              type: string
            lastName:
              type: string
            dateOfBirth:
              type: string
              format: date
            residency:
              $ref: '#/components/schemas/Residency'
            piiTokenReference:
              type: string
              description: Vault token referencing encrypted PII; raw PII is never transmitted downstream.
        contact:
          type: object
          required: [email, phone]
          properties:
            email:
              type: string
              format: email
            phone:
              type: string
              description: E.164 formatted phone number (stored as tokenized reference).
    FinancialProfile:
      type: object
      required: [declaredIncome, currency, bankingSummary]
      properties:
        declaredIncome:
          type: number
          format: double
          minimum: 0
        currency:
          type: string
          description: ISO 4217 currency code; required for cross-border FX workflows.
        bankingSummary:
          type: object
          required: [institutionName, accountLast4, authToken]
          properties:
            institutionName:
              type: string
            accountLast4:
              type: string
              pattern: '[0-9]{4}'
            authToken:
              type: string
              description: Token referencing secure banking aggregation credentials.
    Residency:
      type: object
      required: [zone, lawfulBasis]
      properties:
        zone:
          type: string
          enum: [US, EU, APAC]
          description: Residency zone aligning to sovereign hosting obligations.
        lawfulBasis:
          type: string
          enum: [CONSENT, CONTRACT, LEGAL_OBLIGATION]
        dataController:
          type: string
          description: Legal entity responsible for data under GDPR/CCPA obligations.
    ConsentReference:
      type: object
      required: [consentId, artifactUrl]
      properties:
        consentId:
          type: string
        artifactUrl:
          type: string
          format: uri
        capturedAt:
          type: string
          format: date-time
    AuditContext:
      type: object
      required: [receivedAt, traceId, residencyZone]
      properties:
        receivedAt:
          type: string
          format: date-time
        traceId:
          type: string
        residencyZone:
          type: string
          enum: [US, EU, APAC]
        actorId:
          type: string
        actorType:
          type: string
          enum: [SERVICE, USER]
    ErrorEnvelope:
      type: object
      required: [error]
      properties:
        error:
          $ref: '#/components/schemas/ErrorModel'
    ErrorModel:
      type: object
      required: [code, message, correlationId]
      properties:
        code:
          type: string
          description: Machine readable error code enumerated under `components.responses` taxonomy.
        message:
          type: string
        correlationId:
          type: string
          description: Trace correlation identifier propagated across services.
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              issue:
                type: string
              residencyImpact:
                type: string
                enum: [BLOCKED, DEGRADED, NONE]
  responses:
    ValidationError:
      description: Request could not be processed because of schema or business rule violations.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
          examples:
            invalidResidency:
              summary: Residency mismatch
              value:
                error:
                  code: VALIDATION_RESIDENCY_MISMATCH
                  message: Declared residency EU cannot store documents in US zone.
                  correlationId: 5c4f0b84-3d1b-4f6d-8f1f-cd0a59d6c5e2
                  details:
                    - field: documents[0].residencyContext.zone
                      issue: Residency conflict with tenant default EU
                      residencyImpact: BLOCKED
    AuthError:
      description: Authentication or authorization failure.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
          examples:
            missingScope:
              value:
                error:
                  code: AUTH_SCOPE_MISSING
                  message: OAuth2 token missing intake.applications.read scope.
                  correlationId: d09ab2df-7f24-4e08-9f4f-12cd8d5fb03f
    ConflictError:
      description: Duplicate submission detected based on idempotency key.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
          examples:
            duplicateSubmission:
              value:
                error:
                  code: CONFLICT_DUPLICATE_SUBMISSION
                  message: Submission already processed for idempotency key.
                  correlationId: 8d1e6e11-89c3-4213-8f82-95a3243817b9
    NotFoundError:
      description: Application was not found or is resident in another cell.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
    InternalError:
      description: Unexpected server error occurred; request may be retried.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
